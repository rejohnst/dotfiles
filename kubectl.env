alias k='kubectl'

function getall {
    local namespace=$1
    kubectl get all -n $namespace
}

function logs {
    local pod=$1
    local container=$2

    if [ -z $container ]; then
		container_opt="--all-containers"
    else
		container_opt="-c $container"
    fi
    local namespace=$(kubectl get pods -A | grep $pod | awk '{ print $1 }')
    kubectl logs $pod -n $namespace $container_opt
}

function logf {
    local pod=$1
    local container=$2

    local namespace=$(kubectl get pods -A | grep $pod | awk '{ print $1 }')
    kubectl logs --follow $pod -n $namespace -c $container
}

function vmis {
    local namespace=$1

    if [ -z $namespace ]; then
	ns_opt="-A"
    else
	ns_opt="-n $namespace"
    fi
    kubectl get vmis $ns_opt
}

function vms {
    local namespace=$1

    if [ -z $namespace ]; then
	ns_opt="-A"
    else
	ns_opt="-n $namespace"
    fi
    kubectl get vms $ns_opt
}

function secrets {
    local namespace=$1

    if [ -z $namespace ]; then
	ns_opt="-A"
    else
	ns_opt="-n $namespace"
    fi
    kubectl get secrets $ns_opt
}

function services {
    local namespace=$1

    if [ -z $namespace ]; then
	ns_opt="-A"
    else
    ns_opt="-n $namespace"
    fi
    kubectl get services $ns_opt
}

function pods {
    local namespace=$1

    if [ -z $namespace ]; then
	ns_opt="-A"
    else
	ns_opt="-n $namespace"
    fi
    kubectl get pods $ns_opt -o wide
}


function poddesc {
    local pod=$1
    local namespace=$(kubectl get pods -A | grep $pod | awk '{ print $1 }')
    kubectl describe pods $pod -n $namespace
}

#
# Interactively edit specified pod
#
function podedit {
    local pod=$1
    local namespace=$(kubectl get pods -A | grep $pod | awk '{ print $1 }')
    kubectl edit pod $pod -n $namespace
}

#
# Print all images used by the specified deployment
#
function podimgs {
    local pod=$1
    local namespace=$(kubectl get pods -A | grep $pod | awk '{ print $1 }')
    kubectl get pods $pod -n $namespace -o \
        jsonpath='{.spec.containers[*].image}{"\n"}'
}

#
# Interactively edit specified deployment
#
function depedit {
    local deployment=$1
    local namespace=$(kubectl get pods -A | grep $deployment | tail -1 | awk '{ print $1 }')
    kubectl edit deployment.v1.apps/$deployment -n $namespace
}

#
# Print all images used by the specified deployment
#
function depimgs {
    local deployment=$1
    local namespace=$(kubectl get pods -A | grep $deployment | tail -1 | awk '{ print $1 }')
    kubectl get deployments $deployment -n $namespace -o \
        jsonpath='{.spec.template.spec.containers[*].image}{"\n"}'
}

function gettoken {
    local secret=$1
    local namespace=$2
    local token=$(kubectl get secrets $secret -n $namespace -o jsonpath='{.data.token}' | base64 --decode)
    printf "%s\n" $token
}

function tokurl {
    local token=$1
    local url=$2
    curl -s -S --header "Authorization: Bearer ${token}" --insecure ${url}
}

function watch {
    local namespace=$1

    if [[ -z $namespace ]]; then
        opt="--all-namespaces"
    else
        opt="-n $namespace"
    fi
    kubectl get events $opt --watch
}
